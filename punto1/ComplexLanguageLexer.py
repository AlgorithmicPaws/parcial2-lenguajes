# Generated from ComplexLanguage.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,10,121,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,
        1,4,1,4,1,5,1,5,1,6,4,6,35,8,6,11,6,12,6,36,1,6,4,6,40,8,6,11,6,
        12,6,41,1,6,1,6,4,6,46,8,6,11,6,12,6,47,1,6,1,6,4,6,52,8,6,11,6,
        12,6,53,1,6,1,6,4,6,58,8,6,11,6,12,6,59,1,6,1,6,4,6,64,8,6,11,6,
        12,6,65,3,6,68,8,6,1,7,4,7,71,8,7,11,7,12,7,72,1,7,1,7,1,7,4,7,78,
        8,7,11,7,12,7,79,1,7,1,7,4,7,84,8,7,11,7,12,7,85,1,7,1,7,4,7,90,
        8,7,11,7,12,7,91,1,7,1,7,1,7,4,7,97,8,7,11,7,12,7,98,1,7,1,7,4,7,
        103,8,7,11,7,12,7,104,1,7,3,7,108,8,7,1,8,3,8,111,8,8,1,8,1,8,1,
        9,4,9,116,8,9,11,9,12,9,117,1,9,1,9,0,0,10,1,1,3,2,5,3,7,4,9,5,11,
        6,13,7,15,8,17,9,19,10,1,0,2,1,0,48,57,2,0,9,9,32,32,140,0,1,1,0,
        0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,
        0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,1,21,1,0,0,0,
        3,23,1,0,0,0,5,25,1,0,0,0,7,27,1,0,0,0,9,29,1,0,0,0,11,31,1,0,0,
        0,13,67,1,0,0,0,15,107,1,0,0,0,17,110,1,0,0,0,19,115,1,0,0,0,21,
        22,5,40,0,0,22,2,1,0,0,0,23,24,5,41,0,0,24,4,1,0,0,0,25,26,5,42,
        0,0,26,6,1,0,0,0,27,28,5,47,0,0,28,8,1,0,0,0,29,30,5,43,0,0,30,10,
        1,0,0,0,31,32,5,45,0,0,32,12,1,0,0,0,33,35,7,0,0,0,34,33,1,0,0,0,
        35,36,1,0,0,0,36,34,1,0,0,0,36,37,1,0,0,0,37,68,1,0,0,0,38,40,7,
        0,0,0,39,38,1,0,0,0,40,41,1,0,0,0,41,39,1,0,0,0,41,42,1,0,0,0,42,
        43,1,0,0,0,43,45,5,46,0,0,44,46,7,0,0,0,45,44,1,0,0,0,46,47,1,0,
        0,0,47,45,1,0,0,0,47,48,1,0,0,0,48,68,1,0,0,0,49,51,5,45,0,0,50,
        52,7,0,0,0,51,50,1,0,0,0,52,53,1,0,0,0,53,51,1,0,0,0,53,54,1,0,0,
        0,54,68,1,0,0,0,55,57,5,45,0,0,56,58,7,0,0,0,57,56,1,0,0,0,58,59,
        1,0,0,0,59,57,1,0,0,0,59,60,1,0,0,0,60,61,1,0,0,0,61,63,5,46,0,0,
        62,64,7,0,0,0,63,62,1,0,0,0,64,65,1,0,0,0,65,63,1,0,0,0,65,66,1,
        0,0,0,66,68,1,0,0,0,67,34,1,0,0,0,67,39,1,0,0,0,67,49,1,0,0,0,67,
        55,1,0,0,0,68,14,1,0,0,0,69,71,7,0,0,0,70,69,1,0,0,0,71,72,1,0,0,
        0,72,70,1,0,0,0,72,73,1,0,0,0,73,74,1,0,0,0,74,108,5,105,0,0,75,
        77,5,45,0,0,76,78,7,0,0,0,77,76,1,0,0,0,78,79,1,0,0,0,79,77,1,0,
        0,0,79,80,1,0,0,0,80,81,1,0,0,0,81,108,5,105,0,0,82,84,7,0,0,0,83,
        82,1,0,0,0,84,85,1,0,0,0,85,83,1,0,0,0,85,86,1,0,0,0,86,87,1,0,0,
        0,87,89,5,46,0,0,88,90,7,0,0,0,89,88,1,0,0,0,90,91,1,0,0,0,91,89,
        1,0,0,0,91,92,1,0,0,0,92,93,1,0,0,0,93,108,5,105,0,0,94,96,5,45,
        0,0,95,97,7,0,0,0,96,95,1,0,0,0,97,98,1,0,0,0,98,96,1,0,0,0,98,99,
        1,0,0,0,99,100,1,0,0,0,100,102,5,46,0,0,101,103,7,0,0,0,102,101,
        1,0,0,0,103,104,1,0,0,0,104,102,1,0,0,0,104,105,1,0,0,0,105,106,
        1,0,0,0,106,108,5,105,0,0,107,70,1,0,0,0,107,75,1,0,0,0,107,83,1,
        0,0,0,107,94,1,0,0,0,108,16,1,0,0,0,109,111,5,13,0,0,110,109,1,0,
        0,0,110,111,1,0,0,0,111,112,1,0,0,0,112,113,5,10,0,0,113,18,1,0,
        0,0,114,116,7,1,0,0,115,114,1,0,0,0,116,117,1,0,0,0,117,115,1,0,
        0,0,117,118,1,0,0,0,118,119,1,0,0,0,119,120,6,9,0,0,120,20,1,0,0,
        0,17,0,36,41,47,53,59,65,67,72,79,85,91,98,104,107,110,117,1,6,0,
        0
    ]

class ComplexLanguageLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    MUL = 3
    DIV = 4
    ADD = 5
    SUB = 6
    INT = 7
    IMG = 8
    NEWLINE = 9
    WS = 10

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'('", "')'", "'*'", "'/'", "'+'", "'-'" ]

    symbolicNames = [ "<INVALID>",
            "MUL", "DIV", "ADD", "SUB", "INT", "IMG", "NEWLINE", "WS" ]

    ruleNames = [ "T__0", "T__1", "MUL", "DIV", "ADD", "SUB", "INT", "IMG", 
                  "NEWLINE", "WS" ]

    grammarFileName = "ComplexLanguage.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


